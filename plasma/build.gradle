apply plugin: 'android'

def getVersionCode = { ->

    def code = project.hasProperty('versionCode') ? versionCode.toInteger() : -1
    println "VersionCode is set to $code"
    return code
}

def getVersionName = { ->

    def name = project.hasProperty('versionName') ? versionName : ""
    println "VersionName is set to $name"
    return name
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.1"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 19

        versionCode getVersionCode()
        versionName getVersionName()

        ndk {
            moduleName "plasma"
            cFlags "-std=c99 -g"
            ldLibs "dl", "log", "jnigraphics", "m"
        }
    }

    buildTypes.debug.jniDebugBuild true

    signingConfigs {
        release {
            storeFile file('release.keystore')
            storePassword "xxx"
            keyAlias "quuux"
            keyPassword "xxx"
        }
    }


    buildTypes {
        debug {}

        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.release
        }
    }


}

task askForPasswords << {
    def password = new String(System.console().readPassword("\n\npassword: "))
    android.signingConfigs.release.storePassword = password
    android.signingConfigs.release.keyPassword = password
}

tasks.whenTaskAdded { theTask ->
    if (theTask.name.equals("packageRelease")) {
        theTask.dependsOn "askForPasswords"
    }
}
